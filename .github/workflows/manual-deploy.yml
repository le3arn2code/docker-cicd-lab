name: Manual Deployment
 
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
 
jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Manual Deploy to ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Pull and verify image
      run: |
        echo "Pulling image: ${{ secrets.DOCKER_USERNAME }}/docker-cicd-app:${{ github.event.inputs.image_tag }}"
        docker pull ${{ secrets.DOCKER_USERNAME }}/docker-cicd-app:${{ github.event.inputs.image_tag }}
        docker inspect ${{ secrets.DOCKER_USERNAME }}/docker-cicd-app:${{ github.event.inputs.image_tag }}
        
    - name: Deploy to ${{ github.event.inputs.environment }}
      run: |
        echo "Deploying to ${{ github.event.inputs.environment }} environment"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/docker-cicd-app:${{ github.event.inputs.image_tag }}"
        
        # Create environment-specific deployment script
        cat > deploy-${{ github.event.inputs.environment }}.sh << 'DEPLOY_EOF'
        #!/bin/bash
        
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        CONTAINER_NAME="docker-cicd-app-${ENVIRONMENT}"
        
        echo "Deploying to ${ENVIRONMENT} environment..."
        
        # Stop existing container
        docker stop ${CONTAINER_NAME} || true
        docker rm ${CONTAINER_NAME} || true
        
        # Run new container with environment-specific settings
        if [ "${ENVIRONMENT}" = "production" ]; then
          PORT=80
          RESTART_POLICY="always"
        else
          PORT=3001
          RESTART_POLICY="unless-stopped"
        fi
        
        docker run -d \
          --name ${CONTAINER_NAME} \
          --restart ${RESTART_POLICY} \
          -p ${PORT}:3000 \
          -e NODE_ENV=${ENVIRONMENT} \
          ${{ secrets.DOCKER_USERNAME }}/docker-cicd-app:${IMAGE_TAG}
        
        echo "Deployment to ${ENVIRONMENT} completed!"
        echo "Application available on port ${PORT}"
        DEPLOY_EOF
        
        chmod +x deploy-${{ github.event.inputs.environment }}.sh
        cat deploy-${{ github.event.inputs.environment }}.sh
        
        echo "Deployment script created for ${{ github.event.inputs.environment }}"
